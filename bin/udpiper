#!/usr/bin/env python

import argparse
import logging
from pathlib import Path

try:
    from tqdm import tqdm
except ImportError:
    tqdm = lambda x: x  # Nothing

from udpiper import UDPiper

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='process file with UDPipe')
    parser.add_argument('-m', '--model', help='path to a model file')
    parser.add_argument('-i', '--input', help='input plaintext files',  nargs='+')
    parser.add_argument('--mystem', dest='mystem', action='store_true', help='process with mystem')
    parser.add_argument('--no-mystem', dest='mystem', action='store_false', help='process with default udpipe tagger')
    parser.set_defaults(mystem=True)
    parser.add_argument("-v", "--verbose", action="count",
                    help="increase output verbosity")
    # parser.add_argument('o', 'output', help='output files')

    args = parser.parse_args()

    if not args.verbose:
        logging.basicConfig(level=logging.ERROR)
    elif args.verbose == 1:
        logging.basicConfig(level=logging.WARNING)
    elif args.verbose == 2:
        logging.basicConfig(level=logging.INFO)
    elif args.verbose >= 3:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.critical("UNEXPLAINED NEGATIVE COUNT!")

    logging.info('loading model...')
    pipe = UDPiper(args.model)
    logging.info('loaded model')

    for fn in tqdm(args.input):
        logging.info('process {}'.format(fn))
        fn = Path(fn)
        text = fn.read_text()
        conllu = pipe.process(text, fn.stem, args.mystem)
        fn.with_suffix('.conllu').write_text(conllu)
